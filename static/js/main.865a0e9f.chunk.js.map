{"version":3,"sources":["misc/serviceWorker.js","user_context.js","index.js","helper/index.js","misc/setAuthToken.js"],"names":["Boolean","window","location","hostname","match","UserContext","React","createContext","UserProvider","Provider","socket_stream","Consumer","RoutingSplit","props","loadable","Header","dashboard","employees","configuration","value","socket","path","component","exact","Routing_main","Close","closeToast","className","type","onClick","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","transition","Slide","pauseOnVisibilityChange","draggable","pauseOnHover","closeButton","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","get_color_set","numArr","until","colors","slice","role","pathname","split","endpoint","base_url","url","manual_role","endpoint_mn","api_version_mn","toString","replace","alert_toast","title","content","toast","LoadingBox","viewBox","cx","cy","r","fill","strokeWidth","strokeMiterlimit","setAuthToken","token","axios","defaults","headers","common"],"mappings":"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","file":"static/js/main.865a0e9f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nconst UserContext = React.createContext({})\r\n\r\nexport const UserProvider = UserContext.Provider\r\nexport const UserConsumer = UserContext.Consumer\r\nexport default UserContext","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Switch, Route, useHistory, Redirect } from \"react-router-dom\";\r\nimport { ToastContainer, Slide } from 'react-toastify';\r\nimport * as serviceWorker from './misc/serviceWorker';\r\nimport setAuthToken from './misc/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\nimport axios from 'axios';\r\nimport loadable from '@loadable/component';\r\nimport io from 'socket.io-client';\r\nimport { UserProvider } from './user_context'\r\nimport { socket_url } from './helper'\r\nimport { isCompositeComponent } from 'react-dom/test-utils';\r\n\r\n// axios.interceptors.response.use(function (response) {\r\n//   return response;\r\n// }, function (error) {\r\n//   if ((error.response.status == 401 || error.response.status == 405) && window.location.pathname !== '/login') {\r\n//     window.location.href = '/login';\r\n//   }\r\n//   return Promise.reject(error);\r\n// });\r\n\r\n\r\n// if (localStorage.ghtw) {\r\n//   setAuthToken(localStorage.ghtw);\r\n//   const decoded = jwt_decode(localStorage.ghtw);\r\n//   const currentTime = Date.now() / 1000;\r\n//   if (decoded.exp < currentTime) {\r\n//     // window.location.href = '/login';\r\n//   }\r\n// }\r\n\r\n\r\n\r\nconst socket_stream = {};\r\n\r\nfunction RoutingSplit(props) {\r\n  const Preloading = () => {\r\n    return (<section className=\"main-wrapper\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"main-title\">Loading</div>\r\n        <div className=\"card\">\r\n        </div>\r\n      </div>\r\n    </section >)\r\n  }\r\n\r\n  let faq = {};\r\n\r\n  const login = loadable(() =>\r\n    import('./login')\r\n  );\r\n  const logout = loadable(() =>\r\n    import('./logout')\r\n  );\r\n  const Header = loadable(() =>\r\n    import('./layout/header')\r\n  );\r\n  const dashboard = loadable(() =>\r\n    import('./dashboard')\r\n  );\r\n  const employees = loadable(() =>\r\n    import('./employees')\r\n  );\r\n  const configuration = loadable(() =>\r\n    import('./configuration')\r\n  );\r\n\r\n\r\n\r\n  return (\r\n    <UserProvider value={{ socket: socket_stream }}>\r\n      <Switch>\r\n        {/* {(props.location.pathname !== '/login' && !localStorage.ghtw) && <Redirect to=\"/login\" />} */}\r\n        <>\r\n          <Header {...props} />\r\n          <Route path=\"/monica-dashboard-prototype/dashboard\" component={dashboard} />\r\n          <Route path=\"/monica-dashboard-prototype/employees\" component={employees} />\r\n          <Route path=\"/monica-dashboard-prototype/configuration\" component={configuration} />\r\n          <Route exact={true} path=\"/monica-dashboard-prototype\" component={dashboard} />\r\n        </>\r\n        {/* <Route path=\"/logout\" component={logout} />\r\n        <Route path=\"/login\" component={login} /> */}\r\n      </Switch>\r\n    </UserProvider>\r\n  )\r\n}\r\n\r\nfunction Routing_main() {\r\n\r\n\r\n\r\n  const Close = ({ closeToast }) => <button className=\"btn toast-btn-close\" type=\"buttin\" onClick={closeToast}><i className=\"fal fa-times\" /></button>;\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Switch>\r\n          <RoutingSplit />\r\n        </Switch>\r\n      </Router>\r\n      <ToastContainer\r\n        position=\"bottom-right\"\r\n        autoClose={4000}\r\n        hideProgressBar={true}\r\n        newestOnTop={false}\r\n        closeOnClick={true}\r\n        rtl={false}\r\n        transition={Slide}\r\n        pauseOnVisibilityChange={true}\r\n        draggable={true}\r\n        pauseOnHover={true}\r\n        closeButton={<Close />}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nReactDOM.render(<Routing_main />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport accounting from 'accounting';\r\n\r\nexport function format_number(number, symbol = true) {\r\n  if (parseFloat(number) > 0) {\r\n    if (symbol) {\r\n      return accounting.formatMoney(number, { symbol: 'IDR', format: '%v %s' });\r\n    } else {\r\n      return accounting.formatNumber(number);\r\n    }\r\n  } else {\r\n    return symbol ? '0 IDR' : 0;\r\n  }\r\n}\r\n\r\nexport function get_color_set(numArr = 1) {\r\n  const until = (numArr > 8) ? 8 : numArr;\r\n  const colors = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087', '#f95d6a', '#ff7c43', '#ffa600'];\r\n  return colors.slice(0, until);\r\n}\r\n\r\nconst role = window.location.pathname.split(\"/\")[1];\r\nconst endpoint = (role == 'faq') ? 'http://localhost:7777' : 'http://localhost:7778';\r\nconst api_version = (role == 'faq') ? 'api' : 'api';\r\nexport function base_url(url = \"\", manual_role = false) {\r\n  if (manual_role) {\r\n    const endpoint_mn = (manual_role == 'faq') ? 'http://localhost:7777' : 'http://localhost:7778';\r\n    const api_version_mn = (manual_role == 'faq') ? 'api' : 'api';\r\n    return `${endpoint_mn}/${api_version_mn}/${url.toString().replace(/^\\/|\\/$/g, '')}`;\r\n  } else {\r\n    return `${endpoint}/${api_version}/${url.toString().replace(/^\\/|\\/$/g, '')}`;\r\n  }\r\n}\r\nexport function socket_url() {\r\n  return endpoint;\r\n}\r\n\r\nexport function UcFrist(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport function alert_toast(type, title, content = \"\") {\r\n  toast(\r\n    <section className={`alert-${type}`}>\r\n      <h5 className=\"title\">\r\n        <i className=\"fal fa-info-circle\" />{' '}\r\n        {title}\r\n      </h5>\r\n      <p>\r\n        {content}\r\n      </p>\r\n    </section>);\r\n}\r\n\r\nexport function LoadingBox() {\r\n  return (\r\n    <div className=\"loading-box\">\r\n      <div className=\"loading-box-cont\">\r\n        <div className=\"showbox\">\r\n          <div className=\"loader\">\r\n            <svg className=\"circular\" viewBox=\"25 25 50 50\">\r\n              <circle className=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" strokeWidth=\"2\" strokeMiterlimit=\"10\" />\r\n            </svg>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport function format_date(date, time = true) {\r\n  let DATE_OPTIONS = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    timeZone: 'Asia/Jakarta'\r\n  };\r\n  if (time) {\r\n    DATE_OPTIONS.hour = 'numeric';\r\n    DATE_OPTIONS.hour12 = false;\r\n    DATE_OPTIONS.minute = '2-digit';\r\n  }\r\n  return new Date(date)\r\n    .toLocaleDateString('en-US', DATE_OPTIONS)\r\n    .toString()\r\n    .replace(new RegExp('/', 'g'), '-')\r\n    .replace('.', ':');\r\n}\r\n\r\nexport function validateNaN(value) {\r\n  return value == Infinity || value == 'NaN' ? 0 : value;\r\n}\r\n\r\nexport function toBtcFixed(value) {\r\n  const result = accounting.toFixed(value, 8);\r\n  return result > 0 ? validateNaN(result) : 0;\r\n}\r\n\r\nexport function scroll_to(element) {\r\n  window.scroll({\r\n    left: 0,\r\n    top: element.offsetTop\r\n  });\r\n}\r\n\r\n","import axios from 'axios';\r\n\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply to every request\r\n    axios.defaults.headers.common['Authorization'] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n\r\n};\r\n\r\n\r\nexport default setAuthToken;\r\n"],"sourceRoot":""}